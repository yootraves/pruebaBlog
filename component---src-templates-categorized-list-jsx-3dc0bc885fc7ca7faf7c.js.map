{"version":3,"sources":["webpack:///./src/components/CategorizedList/index.jsx","webpack:///./src/templates/CategorizedList.jsx"],"names":["CategorizedList","_ref","_data","data","location","page","getPage","category","_slicedToArray","pathname","split","allPosts","getPosts","filter","_ref2","c","node","frontmatter","postCount","length","posts","slice","CONTENT_PER_PAGE","react_default","a","createElement","Fragment","PostsWrapper","Helmet_default","concat","PREFIX","toUpperCase","name","content","map","_ref3","_ref3$node$frontmatte","images","tags","path","otherProps","_objectWithoutProperties","Card","_extends","key","Pagination","prefix","propTypes","PropTypes","shape","isRequired","__webpack_require__","d","__webpack_exports__","pageQuery","CategorizedListTemplate","props","layout","components_CategorizedList"],"mappings":"8tCAUA,IAAMA,EAAkB,SAAAC,GAAwB,IAAAC,EAArBC,EAAqBF,EAArBE,KAAMC,EAAeH,EAAfG,SACzBC,EAAOC,YAAQF,GACVG,EAFmCC,EAEvBJ,EAASK,SAASC,MAAM,KAFD,MAGxCC,GAAQT,EAAGC,EACZS,YADSV,GAEOW,OAAO,SAAAC,GAAA,IAAoCC,EAApCD,EAAGE,KAAQC,YAAeV,SAA1B,OAAgDA,IAAaQ,KACnFG,EAAYP,EAASQ,OACrBC,EAAQT,EAASU,OAAOhB,EAAO,GAAKiB,mBAAkBjB,EAAOiB,oBAEnE,OACEC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,KACED,EAAAC,EAAAC,cAAA,gBAAAI,OACMC,UADND,OACetB,EAASwB,gBAExBR,EAAAC,EAAAC,cAAA,QAAMO,KAAK,WAAWC,QAAO,GAAAJ,OAAKC,UAALD,OAActB,EAASwB,kBAEpC,IAAjBX,EAAMD,OACLI,EAAAC,EAAAC,cAAA,wBAGE,KACHL,EAAMc,IAAI,SAAAC,GAAA,IAAAC,EAAAD,EAAGnB,KAAQC,YAAeoB,EAA1BD,EAA0BC,OAAQC,EAAlCF,EAAkCE,KAAMC,EAAxCH,EAAwCG,KAASC,EAAjDC,EAAAL,EAAA,iCACTb,EAAAC,EAAAC,cAACiB,EAAA,EAADC,EAAA,CAAMC,IAAKL,EAAMA,KAAMA,EAAMF,OAAQA,EAAQC,KAAMA,GAAUE,OAGjEjB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CACEC,OAAM,eAAAjB,OAAiBtB,EAAjB,KACNW,UAAWA,EACXd,SAAUA,MAMlBJ,EAAgB+C,UAAY,CAC1B5C,KAAM6C,IAAUC,MAAM,IAAIC,WAC1B9C,SAAU4C,IAAUC,MAAM,IAAIC,YAGjBlD,QCnDfmD,EAAAC,EAAAC,EAAA,8BAAAC,IAWeC,UANiB,SAAAC,GAAK,OACnCjC,EAAAC,EAAAC,cAACgC,EAAA,EAAWD,EACVjC,EAAAC,EAAAC,cAACiC,EAAoBF,KAFzB,IAQaF,EAAS","file":"component---src-templates-categorized-list-jsx-3dc0bc885fc7ca7faf7c.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport PostsWrapper from '~/components/Common/PostsWrapper';\nimport Card from '~/components/Common/Card';\nimport Pagination from '~/components/Common/Pagination';\nimport getPosts from '~/utils/getPosts';\nimport getPage from '~/utils/getPage';\nimport { PREFIX, CONTENT_PER_PAGE } from '~/constants';\n\nconst CategorizedList = ({ data, location }) => {\n  const page = getPage(location);\n  const [, , category] = location.pathname.split('/');\n  const allPosts = data\n    |> getPosts\n    |> (posts => posts.filter(({ node: { frontmatter: { category: c } } }) => category === c));\n  const postCount = allPosts.length;\n  const posts = allPosts.slice((page - 1) * CONTENT_PER_PAGE, page * CONTENT_PER_PAGE);\n\n  return (\n    <>\n      <PostsWrapper>\n        <Helmet>\n          <title>\n            {`${PREFIX}${category.toUpperCase()}`}\n          </title>\n          <meta name=\"og:title\" content={`${PREFIX}${category.toUpperCase()}`} />\n        </Helmet>\n        {posts.length === 0 ? (\n          <div>\n            No posts.\n          </div>\n        ) : null}\n        {posts.map(({ node: { frontmatter: { images, tags, path, ...otherProps } } }) => (\n          <Card key={path} path={path} images={images} tags={tags} {...otherProps} />\n        ))}\n      </PostsWrapper>\n      <Pagination\n        prefix={`/categories/${category}/`}\n        postCount={postCount}\n        location={location}\n      />\n    </>\n  );\n};\n\nCategorizedList.propTypes = {\n  data: PropTypes.shape({}).isRequired,\n  location: PropTypes.shape({}).isRequired,\n};\n\nexport default CategorizedList;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from '~/components/layout';\nimport CategorizedList from '~/components/CategorizedList';\n\nconst CategorizedListTemplate = props => (\n  <Layout {...props}>\n    <CategorizedList {...props} />\n  </Layout>\n);\n\nexport default CategorizedListTemplate;\n\nexport const pageQuery = graphql`\n  query CategorizedListQuery {\n    site {\n      siteMetadata {\n        title\n        author\n        homepage\n      }\n    }\n    posts: allMarkdownRemark (\n      filter: { frontmatter: { hide: { ne: true } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            type\n            title\n            category\n            images\n            path\n            tags\n            date\n            summary\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}